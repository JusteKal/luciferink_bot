const { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('reglement')
        .setDescription('G√©n√®re un embed de r√®glement pour le serveur')
        .addChannelOption(option =>
            option.setName('channel')
                .setDescription('Le channel o√π envoyer le r√®glement')
                .setRequired(false))
        .addRoleOption(option =>
            option.setName('role')
                .setDescription('R√¥le √† donner en acceptant le r√®glement')
                .setRequired(false))
        .setDefaultMemberPermissions(PermissionFlagsBits.ManageChannels),
    
    async execute(interaction) {
        const channel = interaction.options.getChannel('channel') || interaction.channel;
        const acceptRole = interaction.options.getRole('role');

        const rulesEmbed = new EmbedBuilder()
            .setTitle('üìã R√®glement du Serveur')
            .setDescription('Merci de respecter ces r√®gles pour maintenir une bonne ambiance sur le serveur !')
            .setColor('#FF6B6B')
            .addFields(
                {
                    name: 'üîπ R√®gle 1 : Respect',
                    value: 'Respectez tous les membres du serveur. Aucun harc√®lement, insulte ou comportement toxique ne sera tol√©r√©.',
                    inline: false
                },
                {
                    name: 'üîπ R√®gle 2 : Contenu appropri√©',
                    value: 'Pas de contenu NSFW, violent ou inappropri√©.',
                    inline: false
                },
                {
                    name: 'üîπ R√®gle 3 : Spam et flood',
                    value: '√âvitez le spam, le flood et les messages r√©p√©titifs. Un message toutes les quelques secondes est suffisant.',
                    inline: false
                },
                {
                    name: 'üîπ R√®gle 4 : Channels appropri√©s',
                    value: 'Utilisez les bons channels pour vos discussions. Respectez le sujet de chaque salon.',
                    inline: false
                },
                {
                    name: 'üîπ R√®gle 5 : Pseudonymes',
                    value: 'Utilisez un pseudonyme appropri√© et √©vitez les caract√®res sp√©ciaux excessifs.',
                    inline: false
                },
                {
                    name: 'üîπ R√®gle 6 : Publicit√©',
                    value: 'La publicit√© non autoris√©e est interdite. Demandez la permission avant de partager des liens.',
                    inline: false
                },
                {
                    name: 'üîπ R√®gle 7 : Mod√©ration',
                    value: 'Respectez les d√©cisions des mod√©rateurs. En cas de probl√®me, contactez-les en priv√©.',
                    inline: false
                }
            )
            .addFields(
                {
                    name: '‚ö†Ô∏è Sanctions',
                    value: 'Le non-respect de ces r√®gles peut entra√Æner :\n‚Ä¢ Avertissement\n‚Ä¢ Timeout temporaire\n‚Ä¢ Exclusion du serveur\n‚Ä¢ Bannissement d√©finitif',
                    inline: false
                }
            )
            .setFooter({ 
                text: 'En restant sur ce serveur, vous acceptez ces r√®gles.', 
                iconURL: interaction.guild.iconURL() 
            })
            .setTimestamp();

        try {
            const components = [];
            
            if (acceptRole) {
                const acceptButton = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId(`accept_rules_${acceptRole.id}`)
                            .setLabel('‚úÖ J\'accepte le r√®glement')
                            .setStyle(ButtonStyle.Success)
                    );
                components.push(acceptButton);
            }

            await channel.send({ 
                embeds: [rulesEmbed], 
                components: components 
            });
            
            // Sauvegarder le channel de r√®glement dans la config
            const configUpdate = { rules_channel_id: channel.id };
            if (acceptRole) {
                configUpdate.rules_role_id = acceptRole.id;
            }
            
            await interaction.client.db.setGuildConfig(interaction.guildId, configUpdate);

            await interaction.reply({ 
                content: `‚úÖ R√®glement envoy√© dans ${channel}!${acceptRole ? ` Les membres recevront le r√¥le ${acceptRole} en acceptant.` : ''}`, 
                flags: 64 // Ephemeral flag 
            });
        } catch (error) {
            console.error('Erreur lors de l\'envoi du r√®glement:', error);
            await interaction.reply({ 
                content: '‚ùå Erreur lors de l\'envoi du r√®glement.', 
                flags: 64 // Ephemeral flag 
            });
        }
    },
};
