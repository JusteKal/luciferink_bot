const { Events, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ChannelType, PermissionFlagsBits } = require('discord.js');

module.exports = {
    name: Events.InteractionCreate,
    async execute(interaction) {
        // Gestion du bouton d'acceptation des r√®glements
        if (interaction.isButton() && interaction.customId.startsWith('accept_rules_')) {
            const roleId = interaction.customId.replace('accept_rules_', '');
            const role = interaction.guild.roles.cache.get(roleId);
            
            if (!role) {
                return await interaction.reply({
                    content: '‚ùå Le r√¥le configur√© n\'existe plus.',
                    flags: 64 // Ephemeral flag
                });
            }

            if (interaction.member.roles.cache.has(roleId)) {
                return await interaction.reply({
                    content: '‚úÖ Tu as d√©j√† accept√© le r√®glement !',
                    flags: 64 // Ephemeral flag
                });
            }

            try {
                await interaction.member.roles.add(role);
                await interaction.reply({
                    content: `‚úÖ R√®glement accept√© ! Tu as re√ßu le r√¥le ${role}.`,
                    flags: 64 // Ephemeral flag
                });
            } catch (error) {
                console.error('Erreur lors de l\'attribution du r√¥le:', error);
                await interaction.reply({
                    content: '‚ùå Erreur lors de l\'attribution du r√¥le.',
                    flags: 64 // Ephemeral flag
                });
            }
            return;
        }

        // Gestion des menus d√©roulants pour les r√¥les
        if (interaction.isStringSelectMenu() && interaction.customId === 'role_select') {
            try {
                const selectedRoles = interaction.values;
                const member = interaction.member;

                // R√©cup√©rer toutes les options de r√¥les pour ce menu
                const roleOptions = await interaction.client.db.all(
                    'SELECT role_id FROM role_options WHERE menu_id = ?',
                    [interaction.message.id]
                );

                const availableRoles = roleOptions.map(option => option.role_id);

                // Retirer tous les r√¥les du menu que l'utilisateur poss√®de
                const rolesToRemove = member.roles.cache.filter(role => 
                    availableRoles.includes(role.id)
                );

                for (const role of rolesToRemove.values()) {
                    try {
                        await member.roles.remove(role);
                    } catch (error) {
                        console.error(`Erreur lors du retrait du r√¥le ${role.name}:`, error);
                    }
                }

                // Ajouter les nouveaux r√¥les s√©lectionn√©s
                const rolesToAdd = [];
                for (const roleId of selectedRoles) {
                    try {
                        const role = await interaction.guild.roles.fetch(roleId);
                        if (role) {
                            await member.roles.add(role);
                            rolesToAdd.push(role.name);
                        }
                    } catch (error) {
                        console.error(`Erreur lors de l'ajout du r√¥le ${roleId}:`, error);
                    }
                }

                let responseMessage = '';
                if (rolesToAdd.length > 0) {
                    responseMessage = `‚úÖ R√¥le(s) ajout√©(s): ${rolesToAdd.join(', ')}`;
                } else {
                    responseMessage = '‚úÖ Tous les r√¥les ont √©t√© retir√©s.';
                }

                await interaction.reply({
                    content: responseMessage,
                    flags: 64 // Ephemeral flag
                });

            } catch (error) {
                console.error('Erreur lors de la gestion des r√¥les:', error);
                await interaction.reply({
                    content: '‚ùå Erreur lors de la modification des r√¥les.',
                    flags: 64 // Ephemeral flag
                });
            }
        }

        // Gestion des boutons pour les tickets
        if (interaction.isButton()) {
            if (interaction.customId === 'create_ticket') {
                try {
                    // V√©rifier la configuration des tickets
                    const guildConfig = await interaction.client.db.getGuildConfig(interaction.guildId);
                    if (!guildConfig || !guildConfig.ticket_category_id) {
                        return await interaction.reply({
                            content: '‚ùå Le syst√®me de tickets n\'est pas configur√©. Contactez un administrateur.',
                            flags: 64 // Ephemeral flag
                        });
                    }

                    // V√©rifier si l'utilisateur a d√©j√† un ticket ouvert
                    const existingTicket = await interaction.client.db.get(
                        'SELECT * FROM tickets WHERE user_id = ? AND guild_id = ? AND status = ?',
                        [interaction.user.id, interaction.guildId, 'open']
                    );

                    if (existingTicket) {
                        return await interaction.reply({
                            content: `‚ùå Vous avez d√©j√† un ticket ouvert: <#${existingTicket.channel_id}>`,
                            flags: 64 // Ephemeral flag
                        });
                    }

                    const category = await interaction.client.channels.fetch(guildConfig.ticket_category_id);
                    const ticketNumber = await interaction.client.db.getNextTicketNumber(interaction.guildId);

                    // Cr√©er le channel de ticket
                    const ticketChannel = await interaction.guild.channels.create({
                        name: `ticket-${ticketNumber.toString().padStart(4, '0')}`,
                        type: ChannelType.GuildText,
                        parent: category.id,
                        permissionOverwrites: [
                            {
                                id: interaction.guild.roles.everyone.id,
                                deny: [PermissionFlagsBits.ViewChannel]
                            },
                            {
                                id: interaction.user.id,
                                allow: [
                                    PermissionFlagsBits.ViewChannel,
                                    PermissionFlagsBits.SendMessages,
                                    PermissionFlagsBits.ReadMessageHistory
                                ]
                            },
                            {
                                id: interaction.client.user.id,
                                allow: [
                                    PermissionFlagsBits.ViewChannel,
                                    PermissionFlagsBits.SendMessages,
                                    PermissionFlagsBits.ReadMessageHistory
                                ]
                            }
                        ]
                    });

                    // Enregistrer le ticket dans la base de donn√©es
                    await interaction.client.db.createTicket(
                        ticketChannel.id,
                        interaction.user.id,
                        interaction.guildId,
                        ticketNumber
                    );

                    // Message d'accueil dans le ticket
                    const welcomeEmbed = new EmbedBuilder()
                        .setTitle(`üé´ Ticket #${ticketNumber.toString().padStart(4, '0')}`)
                        .setDescription(`Bonjour ${interaction.user} !\n\nMerci d'avoir cr√©√© un ticket. Un membre du staff vous r√©pondra bient√¥t.\n\n**Veuillez d√©crire votre probl√®me ou votre demande en d√©tail.**`)
                        .setColor('#3498DB')
                        .setTimestamp();

                    const actionRow = new ActionRowBuilder()
                        .addComponents(
                            new ButtonBuilder()
                                .setCustomId('close_ticket')
                                .setLabel('Fermer le Ticket')
                                .setStyle(ButtonStyle.Danger)
                                .setEmoji('üîí')
                        );

                    await ticketChannel.send({
                        content: `${interaction.user}`,
                        embeds: [welcomeEmbed],
                        components: [actionRow]
                    });

                    await interaction.reply({
                        content: `‚úÖ Ticket cr√©√©: ${ticketChannel}`,
                        flags: 64 // Ephemeral flag
                    });

                } catch (error) {
                    console.error('Erreur lors de la cr√©ation du ticket:', error);
                    await interaction.reply({
                        content: '‚ùå Erreur lors de la cr√©ation du ticket.',
                        flags: 64 // Ephemeral flag
                    });
                }
            }

            if (interaction.customId === 'close_ticket') {
                const ticket = await interaction.client.db.getTicket(interaction.channelId);
                
                if (!ticket) {
                    return await interaction.reply({
                        content: '‚ùå Ce channel n\'est pas un ticket.',
                        flags: 64 // Ephemeral flag
                    });
                }

                const embed = new EmbedBuilder()
                    .setTitle('üîí Fermeture du Ticket')
                    .setDescription('Ce ticket va √™tre ferm√© dans 5 secondes...')
                    .setColor('#E74C3C')
                    .setTimestamp();

                await interaction.reply({ embeds: [embed] });

                setTimeout(async () => {
                    try {
                        await interaction.client.db.closeTicket(interaction.channelId);
                        await interaction.channel.delete();
                    } catch (error) {
                        console.error('Erreur lors de la fermeture du ticket:', error);
                    }
                }, 5000);
            }

            if (interaction.customId === 'cancel_close') {
                try {
                    await interaction.update({
                        content: '‚úÖ Fermeture du ticket annul√©e.',
                        embeds: [],
                        components: []
                    });
                } catch (error) {
                    console.error('Erreur lors de l\'annulation:', error);
                }
            }
        }
    },
};
